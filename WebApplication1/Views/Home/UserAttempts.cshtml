@using System.Linq
@using DataLayer
@model List<TestAttempt>

@{
    ViewBag.Title = "История попыток";
    var tests = Model?.Select(a => a.name_test).Distinct().ToList() ?? new List<string>();
    var testNameMapping = new Dictionary<string, string>
    {
        { "deriviate_test", "Тест по производным" },
        { "prob_test", "Пробный тест" }
    };
}

<h2 class="user-attempts-header">Попытки пользователя: @ViewBag.Username</h2>

<style>
    .user-attempts-header {
        text-align: center;
        font-family: 'Roboto Condensed', sans-serif;
        font-size: 2.8rem;
        color: #BB86FC;
        margin: 40px 0;
        position: relative;
        padding-bottom: 15px;
        animation: textGlow 2s ease-in-out infinite alternate;
        background: linear-gradient(45deg, #BB86FC, #03DAC6);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    @@keyframes textGlow {
        from {
            text-shadow: 0 0 10px rgba(187,134,252,0.4), 0 0 20px rgba(3,218,198,0.2);
        }

        to {
            text-shadow: 0 0 20px rgba(187,134,252,0.6), 0 0 30px rgba(3,218,198,0.4), 0 0 40px rgba(3,218,198,0.2);
        }
    }

    .user-attempts-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 200px;
        height: 3px;
        background: linear-gradient(90deg, rgba(187,134,252,0) 0%, #BB86FC 50%, rgba(187,134,252,0) 100%);
        box-shadow: 0 0 15px #BB86FC;
    }

    @@media (max-width: 768px) {
        .user-attempts-header {
            font-size: 2rem;
            padding: 0 15px;
        }

            .user-attempts-header::after {
                width: 150px;
            }
    }
</style>

<div class="filter-container">
    <select id="testFilter" class="filter-select" onchange="filterAttempts()">
        <option value="">Все тесты</option>
        @foreach (var test in tests)
        {
            <option value="@test">
                @(testNameMapping.ContainsKey(test) ? testNameMapping[test] : test)
            </option>
        }
    </select>
</div>



<style>
    .filter-container {
        display: flex;
        justify-content: center;
        margin: 30px 0;
        padding: 15px;
        background: linear-gradient(145deg, #2d2d2d, #252525);
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.3);
    }

    .filter-select {
        background: #2A2A2A;
        color: #ffffff;
        border: 2px solid #BB86FC;
        padding: 12px 25px;
        border-radius: 8px;
        font-size: 16px;
        width: 300px;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        appearance: none;
        -webkit-appearance: none;
        background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23BB86FC'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 15px center;
        background-size: 18px;
    }

        .filter-select:hover {
            border-color: #9B6BFC;
            box-shadow: 0 0 15px rgba(187, 134, 252, 0.3);
            transform: translateY(-1.2px);
        }

        .filter-select:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(187, 134, 252, 0.4);
        }

        .filter-select option {
            background: #1E1E1E;
            color: #ffffff;
            padding: 12px;
            border-bottom: 1px solid #3d3d3d;
        }

            .filter-select option:hover {
                background: #3700B3 !important;
            }

        /* Стилизация скролла */
        .filter-select::-webkit-scrollbar {
            width: 8px;
        }

        .filter-select::-webkit-scrollbar-track {
            background: #2d2d2d;
        }

        .filter-select::-webkit-scrollbar-thumb {
            background: #BB86FC;
            border-radius: 4px;
        }

    body {
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #121212;
        color: #ffffff;
    }

    .header {
        text-align: center;
        position: relative;
        margin-top: 50px;
        margin-bottom: 40px;
    }

        .header h1 {
            font-family: 'UnifrakturCook', cursive;
            font-size: 4rem;
            color: #BB86FC;
            text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.7), 3px 3px 0 rgba(255, 255, 255, 0.3);
            z-index: 1;
            position: relative;
        }

    .table {
        width: 90%;
        margin: 20px auto;
        border-collapse: collapse;
        background: #1E1E1E;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
    }

        .table thead {
            background: #3700B3;
            background: linear-gradient(45deg, #3700B3, #6200EE);
        }

        .table th {
            padding: 18px 25px;
            font-weight: 500;
            text-align: left;
            letter-spacing: 0.5px;
        }

        .table td {
            padding: 15px 25px;
            border-bottom: 1px solid #2d2d2d;
            transition: background-color 0.3s ease;
        }

        .table tbody tr:hover {
            background-color: #252525;
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

    td:nth-child(1) {
        color: #03DAC6;
        font-family: 'Consolas', monospace;
    }

    td:nth-child(2),
    td:nth-child(3) {
        color: #BB86FC;
        text-align: center;
        font-weight: bold;
    }

    td:nth-child(4) {
        max-width: 400px;
        word-break: break-word;
        color: #CFD8DC;
    }

    .menu-button {
        background-color: #2A2A2A;
        color: #ffffff;
        border: none;
        padding: 12px 25px;
        font-size: 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        appearance: none;
        -webkit-appearance: none;
    }

        .menu-button:hover {
            background-color: #3A3A3A;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .menu-button:active {
            transform: translateY(0);
            background-color: #BB86FC;
        }

    @@media (max-width: 768px) {
        .table {
            width: 95%;
            display: block;
            overflow-x: auto;
        }

        .header h1 {
            font-size: 2.5rem;
        }

        .menu-button {
            width: 90%;
        }
    }
</style>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Дата</th>
            <th>Баллы</th>
            <th>Всего вопросов</th>
            <th>Ответы</th>
            <th>Название теста</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null)
        {
            foreach (var attempt in Model)
            {
                <tr>
                    <td>@attempt.AttemptDate.ToString("g")</td>
                    <td>@attempt.Score</td>
                    <td>@attempt.TotalQuestions</td>
                    <td>@attempt.UserAnswers</td>
                    <td data-test-name="@attempt.name_test">
                        @if (testNameMapping.ContainsKey(attempt.name_test))
                        {
                            @testNameMapping[attempt.name_test]
                        }
                        else
                        {
                            @attempt.name_test
                        }
                    </td>
                    <td>
                        @if (attempt.name_test == "deriviate_test")
                        {
                            <button class="menu-button" onclick="viewAttempt(@attempt.Id)">Просмотреть попытку</button>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">Попыток не найдено</td>
            </tr>
        }
    </tbody>
</table>

<script>
    function viewAttempt(attemptId) {
        window.location.href = '/Home/ViewAttempt?id=' + attemptId;
    }
</script>

<script>
    function filterAttempts() {
        const select = document.getElementById('testFilter');
        const selectedTest = select.value;
        const rows = document.querySelectorAll('.table tbody tr');

        rows.forEach(row => {
            const testCell = row.cells[4]; // 5-я ячейка с названием теста
            const originalTestName = testCell.getAttribute('data-test-name');

            if (!selectedTest || originalTestName === selectedTest) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }
</script>